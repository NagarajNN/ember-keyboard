{{format-markdown "
## Usage

### Using ember-keyboard in templates (recommended!)

To declaratively attach an action to a keyboard event while a particular template
is rendered, use the `on-key` helper. In this example, when a user presses the '/'
key, the onSlash action is triggered.

```htmlbars
{{on-key '/' this.onSlash}}
```

Note that the listener is active for the lifecycle of the helper. When the helper is unrendered, the listener is removed.

Modifiers like alt, shift, and ctrl are supported, too:

```hbs
{{on-key 'alt+c' this.doThing}}
```

By default, actions will be triggered on the `keydown` event. To fire it on
`keyup` or (the deprecated) `keypress`, specify the `event`:

```hbs
{{on-key 'alt+c' this.doThing event='keyup'}}
```

To bind multiple key combos, including to the same action, include the helper multiple times:

```hbs
{{on-key 'alt+c' this.doThing}}
{{on-key 'ctrl+shift+t' this.doThing}}
```

In the examples above, 'c', 't', and '/' are interpreted to mean “the key that
was pressed produces the specified character under normal circumstances.” In
the W3C's specifications for DOM keyboard events, this is known as the `key`
property. There is another property, called `code`, which is based on the
”standard position“ of a key regardless of what remapping may be in place.
Values for `code` look like `KeyC`, `Digit1`, `Backspace`, etc. [You can find a
full list here.](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/code/code_values)
Values for `code` and `key` don't overlap, so if `ember-keyboard` will
automatically infer which property you care about based on how you specify your
key combo. For example,

```hbs
<!-- Fires DoThing on keydown of the key at the standard position of the C key
     while Alt is pressed. This is inferred from the use of `KeyC` rather than `c` -->
{{on-key 'alt+KeyC' this.doThing}}
```

There is a 'magic' key combo to match any key: `_all`.

```hbs
<!-- Fires DoThing on keydown of alt plus any key -->
{{on-key 'alt+_all' this.doThing}}

<!-- Fires DoThing on keyup of any key, irrespective of modifier keys -->
{{on-key '_all' this.doThing event='keyup'}}
```

Another option (supported in Ember 3.8+) for templates is the `on-key` element modifier. This allows a keydown event to trigger an action. In the following example, we trigger an action when the input field is focused and the user presses enter:

```htmlbars
<input type='text'
  oninput={{action (mut this.textFieldValue) value='target.value'}}
  {{on-key 'Enter' (action 'onEnterPressedInInput')}}
>
```

If you want a shortcut for triggering a click on an element when a key is pressed,
you can use the same modifier without an action (also Ember 3.8+). This allows a
keyboard event to simulate clicking the element the modifier is attached to.
In the following example, we trigger a click on the button when the B key is
pressed together with the Alt key:

```htmlbars
<button {{on 'click' @onButtonClick}} {{on-key 'alt+b'}}>
  Press me or press 'Alt-B'
</button>
```

### Using ember-keyboard with your Javascript classes

ember-keyboard also offers an API for making your own object a “responder”, in
the library's parlance. This means the object gets registered with the `keyboard`
service, and can handle one or more key combos.

For ES6 classes, this accomplished by using the class decorator `@keyResponder`
and the method decorator `@onKey`. For example:

```js
import Component from '@glimmer/component';
import { keyResponder, onKey } from 'ember-keyboard';

@keyResponder
export default class extends Component {
  //...

  @onKey('alt+c')
  doSomethingA() { ... }

  @onKey('alt+c', { event: 'keyup' })
  doSomethingB() { ... }

  @onKey('ctrl+2') // Binding multiple combos to one method
  @onKey('ctrl+shift+KeyT')
  doSomethingC() { ... }

  //...
}
```

As shown in the example code above, the `@onKey` decorator accepts a key combo as
the first argument, and a optional `options` argument, allowing you to specify an
alternate event (default is `keydown`).

The `@keyResponder` decorator accepts an optional `options` argument to allow
a shortcut for setting the `keyboardPriority` of this responder.

```js
@keyResponder({ priority: 2 })
export default class extends Component {
  //...
}
```

In addition to Glimmer Component classes, you can use these decorators on services,
routes, controllers, etc, provided that they are ES6 classes.

Decorators require Ember 3.10 or higher. If you are using an Ember version earlier than that, you will
need to stick with template helpers/modifiers.

For “classic” Ember classes, the usage of the decorator imports is a little different:

```js
import Component from '@ember/component';
import { keyResponder, onKey } from 'ember-keyboard';

export default keyResponder(Component.extend({
  //...
  doSomethingA: onKey('alt+c', function() { ... }),

  doSomethingB: onKey('alt+c', { event: 'keyup' }, function() { ... })

  // Binding multiple combos.
  doSomethingC: onKey('alt+c', onKey('ctrl+shift+KeyT'), function() {
    ...
  }),

//...
}));
```

### Low-level key-matching API

A low-level API for the matching engine that determines whether a particular keyboard event is
considered to match a specified key-combo will also be exposed.

It will be available (and used internally) as an `isKey` JS function:

```js
import { isKey } from 'ember-keyboard';

function onEvent(ev) {
  if (isKey('keydown:alt+x', ev)) {
    this.handleKeydownWithAltX();
  }
}
```

A variation will also be available as an `if-key` helper that can be used
any place a function that received a KeyboardEvent would be used:

```hbs
{{!-- attach your own event handler using the {{on}} modifier --}}

<div {{on 'keydown' (if-key 'alt+c' this.doThing)}}></div>

{{!-- combining with the ember-on-helper addon --}}

{{on-document 'keydown' (if-key 'alt+KeyX' this.doThing)}}

{{!-- use some third-party component API --}}

<SomeComponent @onKey={{if-key 'alt+x' this.doThing}}/>
```

Note that low-level usage like this will not participate in the wider ember-keyboard functionality
(responders, priority, etc), but can be useful if you just want to leverage the key combo
matching code of ember-keyboard.

### Modifier Keys

As you have seen from the example code above, you can augment your key bindings with modifier keys,
including `ctrl`, `shift`, `alt`, and `meta`. In addition, `ember-keyboard` supports a special key
definition called `cmd`. It is very common for MacOS users to expect to use key combinations such
as Command(⌘)+Key, where a PC or Linux user would use Ctrl+Key. `cmd` handles this behavior.
For instance this defintion:

```js
@onKey('cmd+Enter')
triggerSubmit() {
  ...
});
```

will trigger on Command(⌘)+Enter on macOS or Ctrl+Enter on all other platforms.

Note that `ctrl` should be used with caution, as MacOS will swallow some `ctrl` events before `ember-keyboard` can observe them.

### `keyUp`, `keyDown`, `keyPress`, `mouseDown`, `mouseUp`, `click`, `touchStart`, and `touchEnd`

By default, `ember-keyboard` listens to `keydown`, `keyup`, and `keypress`. It can optionally listen
to `mousedown`, `mouseup`, `click`, `touchstart`, and `touchend` as well.

If you want `ember-keyboard` to listen to fewer events or to add any of the mouse/touch event, then you can specify them in your `config/environment.js` file like so:

```js
ENV.emberKeyboard = {
  listeners: ['keyUp', 'keyDown', 'click'] // use only `keyUp`, `keyDown`, and `click`
}
```

Note that `keydown` events fire repeatedly while the key is pressed, while `keyup` events fire only once,
after the key has been released.

### Mouse Events

Mouse events can listen for the `left`, `right`, and `middle` buttons like so:

```js
@onKey('left', { event='mouseup'})
triggerSubmit() {
  ...
});
```

You can also combine it with the standard modifier keys:

```js
@onKey('cmd+left', { event='mouseup'})
triggerSubmit() {
  ...
});
```

### `event`

When `ember-keyboard` triggers an event, it passes in the `event` object as its first argument:

```js
@onKey('ctrl+s')
saveDocument(event) {
  this.performSave();
  event.preventDefault();
}
```

Note that if you want `preventDefault` to prevent `window` level events, you'll need to use `keydown`,
as the default event will fire before `keyup`.

### Key Indifference

If you want an event to fire for every keypress, you can use the magic specified `_all`. This can be a
handy way to trigger events for large ranges of keys, such as on any alphanumeric keypress. For instance:

```js
@onKey('_all')
triggerOnAlphaNumeric(event) {
  if (/^\w/.test(event.key)) {
    this.startEditing();
  }
}
```

### `Ember.TextField` && `Ember.TextArea`

To prevent `ember-keyboard` from responding to keystrokes while an input/textarea is focused,
you may use the `on-key` modifier with regular `<input>` and `<textarea>` elements and invoke
`ekEvent.stopPropagation()` and/or `ekEvent.stopImmediatePropagation()`.
This ensures that whenever an input is focused, other key responders will not fire.

```htmlbars
<input {{on-key '/' this.onSlash}} />
{{textarea}}
```

```javascript
@action
this.onSlash (event, ekEvent) {
  ekEvent.stopPropagation();
  ekEvent.stopImmediatePropagation();
}
```

### Unpropagated Key Events

Some key events get swallowed by the browser well before they reach `ember-keyboard`. Here is a growing (aka incomplete) list of such events:

* Enter: keyUp (keyDown works)
* On MacOS
  * alt+e
  * alt+i
  * alt+n
  * alt+u
  * alt+`
  * shift+alt+c
  * shift+alt+e
  * shift+alt+p
"}}
